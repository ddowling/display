from PIL import Image
import sys, glob, re
from pathlib import Path

in_image = "sprites/space__0000_A1.png"
out_file = "sprites.cpp"

prog = " ".join(sys.argv)
word_bits = 32

out = open(out_file, "w")

out.write(f'''// Generated by {prog}
#include "Bitmap.h"

''')

for in_image in glob.glob("sprites/*.png"):
    in_image = Path(in_image)
    image = Image.open(in_image)
    image = image.convert("RGBA")
    (image_width, image_height) = image.size

    word_width = int((image_width + word_bits - 1)/word_bits)

    # Convert filename to an identifier
    bitmap_name = re.sub("\W|^(?=\d)", "_", in_image.stem)
    bitmap_data_name = bitmap_name + "_data"
    
    print(f"Loaded {image.size} image from {in_image}")

    blob = ""
    for y in range(image_height):
        if blob:
            blob += "\n"
        words = []
        word = 0
        for x in range(word_width * word_bits):
            if x < image_width:
                rgba = image.getpixel((x, y))
                if rgba[3] > 0:
                    p = 1
                else:
                    p = 0
            else:
                p = 0
        
            word = (word<<1) | p
            if (x+1) % word_bits == 0:
                words.append(word)
                word = 0

        line = ""
        for word in words:
            line += "0x%08x," % word
        line += "    // "
        for x in range(image_width):
            rgba = image.getpixel((x, y))
            if rgba[3] > 0:
                p = 1
            else:
                p = 0
            line += "*" if p else " "
        blob += "    " + line

    out.write(f'''static const uint32_t {bitmap_data_name}[{image_height*word_width}] = {{
{blob}
}};

const Bitmap {bitmap_name} = {{
    {image_width}, // width
    {image_height}, // height
    {word_width}, // word_width
    (uint32_t *){bitmap_data_name} // buffer
}};

''')

out.close()
